PYTHON      = python
MCU         = atmega32u4
CFLAGS      = -std=gnu99 -g -Werror -Wall -Wextra -Wno-unused-parameter
AVR_CFLAGS  = -mmcu=$(MCU) -Os -DF_CPU=8000000ul -flto
HOST_CFLAGS = -fpic `$(PYTHON) get_python_cflags.py` -DCFFI

!cc_avr     = |> ^ CC %o^    avr-gcc $(CFLAGS) $(AVR_CFLAGS)                         -c %f -o %o |>
!ld_avr     = |> ^ LD %o^    avr-gcc $(CFLAGS) $(AVR_CFLAGS) -Wl,--cref -Wl,-Map=%O.map %f -o %o |> | %O.map
!ar_avr     = |> ^ AR %o^    avr-gcc-ar crs %o %f                        |>
!dis_avr    = |> ^ DIS %o^   avr-objdump -d %f > %o                      |>
!hex_avr    = |> ^ HEX %o^   avr-objcopy -j .text -j .data -O ihex %f %o |>
!size_avr   = |> ^ SIZE %o^  avr-size -C --mcu=$(MCU) %f > %o            |>
!check_avr  = |> ^ CHECK %o^ ./check_assembly.sh %f > %o                 |>

!cc_host          = |> ^ CC %o^    gcc $(CFLAGS) $(HOST_CFLAGS)            -c      %f -o %o |>
!cc_host_coverage = |> ^ CC %o^    gcc $(CFLAGS) $(HOST_CFLAGS) --coverage -c      %f -o %o |> | %O.gcno
!so_host          = |> ^ SO %o^    gcc $(CFLAGS) $(HOST_CFLAGS) --coverage -shared %f -o %o |>

!preproc = |> ^ CPP %o^ gcc -undef -nostdinc -D CFFI -I dummy_stdlib -P -dD -E %f -o %o |>

!graphviz = |> ^ DOT %o^ dot -Tpng %f > %o |>



: structure.dot |> !graphviz |> structure.png



common_sources =  datetime.c sha1.c hmac_sha1.c hotp.c font.c
common_sources += blinky.c app.c spi_bitbang.c as1107.c display_as1107.c debug_common.c



avr_sources = result.c halt_avr.c actor_avr.c timer_avr.c pin_avr.c pinint_avr.c debug_avr.c
avr_main_sources = main_avr.c

: foreach $(common_sources) $(avr_sources) |> !cc_avr |> %B.avr.o {avr_objects}
: foreach $(avr_main_sources) |> !cc_avr |> %B.avr.o

: main_avr.avr.o {avr_objects} |> !ld_avr |> app.avr.elf {avr_binaries}

: foreach {avr_binaries}      |> !dis_avr   |> %B.s {avr_disassemblies}
: foreach {avr_binaries}      |> !hex_avr   |> %B.hex
: foreach {avr_binaries}      |> !size_avr  |> %B_size.txt
: foreach {avr_disassemblies} |> !check_avr |> %B_check.txt



host_sources = pure_cffi.c debug_host.c blinky_cffi.c spi_bitbang_cffi.c
cffi_headers = pure_cffi.h blinky.h spi_bitbang.h

: foreach $(cffi_headers) |> !preproc |> %B.i

: pure_cffi.h pure_cffi.i callbacks.txt|> ^ CFFI %o^ $(PYTHON) gen_cffi.py -m pure_cffi -f %1f -i %2f -c %3f -o %o |> pure_cffi.c
: blinky.h blinky.i callbacks.txt |> ^ CFFI %o^ $(PYTHON) gen_cffi.py -m blinky_cffi -f %1f -i %2f -c %3f -o %o |> blinky_cffi.c
: spi_bitbang.h spi_bitbang.i callbacks.txt |> ^ CFFI %o^ $(PYTHON) gen_cffi.py -m spi_bitbang_cffi -f %1f -i %2f -c %3f -o %o |> spi_bitbang_cffi.c

: foreach $(common_sources) |> !cc_host_coverage |> %B.host.o
: foreach $(host_sources)   |> !cc_host          |> %B.host.o

: pure_cffi.host.o debug_common.host.o debug_host.host.o datetime.host.o sha1.host.o hmac_sha1.host.o hotp.host.o font.host.o |> !so_host |> pure_cffi.so
: blinky_cffi.host.o blinky.host.o debug_common.host.o debug_host.host.o |> !so_host |> blinky_cffi.so
: spi_bitbang_cffi.host.o spi_bitbang.host.o debug_common.host.o debug_host.host.o |> !so_host |> spi_bitbang_cffi.so
